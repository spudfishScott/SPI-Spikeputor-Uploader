
		processor 6502
		seg program
        
		org $9000
        
SPI_SS		equ $C0C1		; SPI card commands (assumes slot 4)
SPI_EXEC	equ $C0C0
SPI_DATA	equ $C0C2
SPI_RESET	equ $C0C3

A2_CH		equ $24			; Apple cursor H-position
A2_CV		equ $25			; Apple cursor V-position - do not set directly!
A2_BAS		equ $28			; Apple current cursor text buffer address
A2_H2		equ $2C			; Apple leftmost h position of HLIN
A2_V2		equ $2D			; Apple bottommost v position of VLIN
A2_HGRPAGE	equ $E6			; Apple hi byte of current HGR page buffer address

A2_HCLEAR	equ $F3F2		; Applesoft HCLEAR command (clear hgr buffer)
A2_HPLOT	equ $F457		; Applesoft HPLOT command
A2_HGLIN	equ $F53A		; Applesoft HGLIN command (draw a line from last plotted point)
A2_SETHCOL	equ $F6F0		; Applesoft set HCOLOR command
A2_PLOT		equ $F800		; Applesoft Monitor ROM Lo-res plot command
A2_HLINE	equ $F819		; Apple Monitor ROM HLINE command
A2_VLINE	equ $F828		; Apple Monitor ROM VLINE command
A2_CLRSCR	equ $F832		; Apple Monitor ROM Clear GR Screen
A2_CLRTOP	equ $F836		; Apple Monitor ROM Clear top of GR Screen (mixed mode)
A2_SETCOL	equ $F864		; Apple Monitor ROM Set color command
A2_TABV		equ $FB5B		; Apple Monitor ROM set vertical cursor command
A2_WAIT		equ $FCA8		; Apple Monitor ROM WAIT function
A2_HOME		equ $FC58		; Apple Monitor ROM HOME function
A2_COUT		equ $FDED		; Apple Monitor ROM Character Out

A2_KBD		equ $C000		; Apple Keyboard In
A2_KBD_STRB	equ $C010		; Apple Keyboard Strobe Clear
A2_TXTCLR	equ $C050		; Apple Soft Switch: Graphics Mode On
A2_TXTSET	equ $C051		; Apple Soft Switch: Text Mode On
A2_MIXCLR	equ $C052		; Apple Soft Switch: Mixed Mode Off
A2_MIXSET	equ $C053		; Apple Soft Switch: Mixed Mode On
A2_LORES	equ $C056		; Apple Soft Switch: Lores Graphics
A2_HIRES	equ $C057		; Apple Soft Switch: Hires Graphics


SP_OUT_BUF_LCK	equ $7FB0		; Spikeputor Output Buffer Lock
SP_OUT_BUF_IDX	equ $7FB2		; Spikeputor Output Buffer Indeces
SP_OUT_BUF	equ $7E00		; Spikeputor Output Buffer

SP_IN_BUF_LCK	equ $7FB4		; Spikeputor Input Buffer Lock
SP_IN_BUF_IDX	equ $7FB6		; Spikeputor Input Buffer Indeces
SP_IN_BUF	equ $7E80		; Spikeputor Input Buffer

; command and data bytes for spi_cmd
ZP_CMD_PKG	equ $EB	
ZP_CMD_STAT	equ $EB			
ZP_DATAH	equ $EC
ZP_DATAL	equ $ED

; variables for upload_verify
ZP_LENH		equ $EE			; length
ZP_LENL		equ $EF
ZP_VERIFY	equ $FF 		; set to $80 to verify, $00 to write
ZP_SRC_PTR	equ $F9			; pointer to source data - starts at $2004

; variables for monitor_IO
ZP_BUF_IDX	equ $EE			; buffer index 
ZP_BUF_IDXH	equ $EE			; (hi byte = first char index)
ZP_BUF_IDXL	equ $EF			; (lo byte = next open index)
ZP_BUF_OUTCHAR	equ $F9			; 2 byte character output
ZP_ESCAPE_CODE	equ $FB			; storage for escape command
ZP_FIRSTH	equ $FE			; hi byte
ZP_FIRSTL	equ $FD			; lo byte
ZP_MON_FLAGS	equ $FF			; bit 7: 1 = ESC sequence being read 
					; bit 6: 1 = GR, 0 = TEXT mode
                                        ; bit 5: 1 = HGR, 0 = GR mode
                                        ; bit 4: 1 = full screen gr, 0 = mixed gr and text
                                        ; bit 3: 1 = show cursor, 0 = hide cursor
                                        ; bit 2: 1 = allow input, 0 = disallow input

;-----------------------------------------------------------------------------------------
; Execute SPI command. Writes command and two data bytes. Reads status and two data bytes.
; Set ZP_CMD_PKG before calling, A and X scrambled.
;-----------------------------------------------------------------------------------------
		SUBROUTINE
SPICmd		ldx #$00
        	lda #$01		; use SPI channel 0 (set bit 0)
        	sta SPI_SS		; begin SPI transaction
                lda #$01
                jsr A2_WAIT		; wait for INIT puse to finish (30 uS)
.nextByte	lda ZP_CMD_PKG,x	; load byte (one command byte, two data bytes)
                sta SPI_DATA		; store in SPI data latch
                sta SPI_EXEC		; execute SPI transfer
.wait		lda SPI_SS		; get transfer status
                bpl .wait		; wait until all 8 bits are sent
                lda SPI_DATA		; get reply byte from SPI data latch
                sta ZP_CMD_PKG,x	; store byte (one status byte, two data bytes)
                inx
                cpx #$03
                bne .nextByte		; repeat for all three bytes
                sta SPI_RESET		; end SPI transaction
                lda #$01
                jsr A2_WAIT		; wait 30 µs to give time for SPI EXECUTE pulse to finish
                nop			; wait an additional 8 µs to be sure that 60 elapses between 
                nop			; SPI end trasaction and next SPI begin
                nop
                nop
                rts
                
;----------------------------------------------------------------------------------------
; upload and verify - furnish length (ZP_LENH/L) and verify flag (ZP_VERIFY). 
; Returns with $FF in VERIFY if error, page index in LENL, A, Y and X scrambled.
;----------------------------------------------------------------------------------------
		SUBROUTINE
UploadVerify	lda #$00		; initialize pointers and page end
		sta .pageEnd+1
                lda #$04
                sta ZP_SRC_PTR
                lda #$20
                sta ZP_SRC_PTR+1	; data starts at $2004
                
                lda ZP_LENH		; if less than one page, go right to final page
                beq .finalPage
.nextPage	ldy #$00
.pageLoop	lda ZP_VERIFY		; if verify set, verify, otherwise send
                bmi .verify
                
.send		lda (ZP_SRC_PTR),y
		sta ZP_DATAH		
		iny 
                lda (ZP_SRC_PTR),y	; move hi and lo bytes into spi data storage
		sta ZP_DATAL
                lda #$90		; $90 = write command
                sta ZP_CMD_STAT		; move command into spi command storage
                jsr SPICmd		; execute spi transaction
                jmp .common

.verify		lda #$80		; $80 = read command
		sta ZP_CMD_STAT		; move command into spi command register
		jsr SPICmd		; execute spi transaction
                lda (ZP_SRC_PTR),y	
                cmp ZP_DATAH		; compare data bytes to what was read
                bne .error		; error if not the same
                iny
                lda (ZP_SRC_PTR),y
                cmp ZP_DATAL
                bne .error
                
.common         iny      
.pageEnd	cpy #$00		; check to see if done with page
		bne .pageLoop		; (including partial page)
		lda ZP_LENH
                beq .finalPage
                inc ZP_SRC_PTR+1	; add one to data pointer hi byte
                dec ZP_LENH
                jmp .nextPage		; read or verify next page
                
.finalPage	lda ZP_LENL		; if length lo byte is >0, put it in page_end compare
		beq .end
                sta .pageEnd+1
                lda #$00
                sta ZP_LENL		; zero out lo byte for next time
                jmp .nextPage		; and read or verify next (partial) page
                
.error		lda #$ff		; set error flag
		sta ZP_VERIFY
                sty ZP_LENL		; store current y reg for analysis
.end		rts
	
;----------------------------------------------------------------------------------------
; Monitor I/O - reads Spikpeutor buffer index and prints out any characters in it
;		will eventually handle special commands and graphics
;		exit on ESC being pressed, A, X, and Y scrambled
;----------------------------------------------------------------------------------------    
        	SUBROUTINE
Monitor_IO 	bit A2_KBD_STRB		; clear keyboard strobe
		jsr ResetSpikeputor
	    	lda #$00
                sta ZP_MON_FLAGS	; initialize monitor flags on start and reset
                sta ZP_ESCAPE_CODE	; initialize escape command
                sta ZP_FIRSTL		; initialize 1st paramter storage
                lda #$ff
                sta ZP_FIRSTH		; $ff = empty
                lda #$20
                sta A2_HGRPAGE		; set page 1 for hi-res graphics
                jsr SetGraphicsMode	; initialize grpahics mode
                jsr ClearScreen		; clear screen
                
.monitorLoop	lda A2_KBD
                bpl .stop		; no new input, continue, don't clear strobe
                
                cmp #$91		; if ctrl-q is pressed, end
                bne .nextChk
                bit A2_KBD_STRB		; clear keyboard strobe
                rts
.nextChk        cmp #$80		; if ctrl-shift-p pressed, reset and restart monitoring
                beq Monitor_IO
                
.stop		jsr StopSpikeputor
                ldx #>SP_OUT_BUF_LCK
                lda #<SP_OUT_BUF_LCK
                jsr ReadAddress		; read output buffer lock
                lda ZP_DATAH
                bne .checkInput		; if not zero, buffer is locked, check input buffer
 
                ldx #>SP_OUT_BUF_IDX
                lda #<SP_OUT_BUF_IDX
                jsr ReadAddress		; read buffer indeces
                lda ZP_DATAH
                cmp ZP_DATAL
                beq .checkInput		; if start index is the same as last open index, nothing to read
                
                sta ZP_BUF_IDXH		; save the buffer indeces
                lda ZP_DATAL
                sta ZP_BUF_IDXL
                
.bufLoop	ldx #>SP_OUT_BUF
		lda ZP_BUF_IDXH		; get index of first character in buffer = hi byte of buffer address
                jsr ReadAddress		; get next word from buffer
                		
                bit ZP_MON_FLAGS	; is an escape sequence being read?
		bpl .specCheck		; no? continue
                jsr HandleEscape	; if so, handle it
                jmp .incIdx		; never need to update text after an escape command
                
.specCheck	lda ZP_DATAL		; get lo byte of character data (ascii)
                cmp #$20		; check for special characters
                bpl .normalChar		; if not, check if we're in an escape character sequence
                jsr HandleSpecialChar	; handle any special character input
                bcc .incIdx		; if carry is clear, don't print the character	
                
.normalChar     lda #$08		; check bit 3 (cursor on)
		bit ZP_MON_FLAGS
                beq .printPrep		; cursor is off
                jsr SetCursorNormal	; set current cursor position to normal
                
.printPrep      lda ZP_DATAL		; reload character lo byte
		ora #$80		; set high bit to make text normal (not flashing or inverse)
                cmp #$E0                ; if character is >= $E0, it's lower case
                bmi .print
                and #$DF		; get rid of bit 5 (converts to upper case)
.print          jsr A2_COUT		; print the character
                
                lda #$08		; check bit 3 (cursor on)
		bit ZP_MON_FLAGS
                beq .incIdx		; cursor is off
               	jsr SetCursorFlash	; set new cursor position to flashing
                
.incIdx         lda ZP_BUF_IDXH
		clc
                adc #$02		; go to next index
                and #$7f		; wrap index around to $00 after $7f
                sta ZP_BUF_IDXH
                cmp ZP_BUF_IDXL		; check if next index is last open index
                bne .bufLoop
                
                ldx #>SP_OUT_BUF_IDX
                lda #<SP_OUT_BUF_IDX
                ldy #ZP_BUF_IDX
                jsr WriteAddress	; write new buffer indeces

.checkInput	lda #$04		; check bit 2 (input mode on)
		bit ZP_MON_FLAGS
                beq .restart		; input mode off
                
                ldx #>SP_IN_BUF_LCK
                lda #<SP_IN_BUF_LCK
                jsr ReadAddress		; read input buffer lock
                lda ZP_DATAH
                bne .restart		; if not zero, buffer is locked, resume
                
                lda A2_KBD
                bpl .restart		; no new input, resume
                
                cmp #$91		; ctrl-q is pressed
                beq .restart
                cmp #$80		; ctrl-shift-p pressed
                beq .restart		; if either key pressed, don't clear strobe and fall through to next loop
                cmp A2_KBD_STRB		; clear keyboard strobe
                
                and #$7f		; regular key pressed: strip out strobe bit
                sta ZP_BUF_OUTCHAR+1	; store the character in lo out byte
                lda #$00
                sta ZP_BUF_OUTCHAR	; zero in high out byte
                
                ldx #>SP_IN_BUF_IDX
                lda #<SP_IN_BUF_IDX
                jsr ReadAddress		; read input buffer indeces
                lda ZP_DATAH		; save the buffer indeces
                sta ZP_BUF_IDXH		; start index
                lda ZP_DATAL
                sta ZP_BUF_IDXL		; next open index
                
                ldx #>SP_IN_BUF
		ora #$80		; add 80 to the next index to get input buffer address
		ldy #ZP_BUF_OUTCHAR	; point Y to the data to write
                jsr WriteAddress
                
                lda ZP_BUF_IDXL
                clc
                adc #$02		; go to next index
                and #$7f		; wrap index around to $00 after $7f
                sta ZP_BUF_IDXL
                cmp ZP_BUF_IDXH		; check if last open index is first index - buffer overflow
                bne .writeInput
                
                lda ZP_BUF_IDXH		; increment start index
                clc
                adc #$02		; carry can't be set from last add since $7f+$02 is never overflow
                and #$7f		; wrap index around to $00 after $7f
                sta ZP_BUF_IDXH
                
.writeInput 	ldx #>SP_IN_BUF_IDX
                lda #<SP_IN_BUF_IDX
                ldy #ZP_BUF_IDX
                jsr WriteAddress	; write new buffer indeces               
                
.restart	jsr RestartSpikeputor
                
.wait		lda #$40
                jsr A2_WAIT		; delay enough for Spikeputor to add to buffer, but too slow is bad
                jmp .monitorLoop        ; loop
;----------------------------------------------------------------------------------------
SetCursorNormal				; turn cursor blink character to normal
		SUBROUTINE
                ldy A2_CH		
                lda (A2_BAS),y		; get current cursor character
                and #$3f		; isolate character data
                eor #$20		; convert to normal version
                clc
                adc #$a0
                sta (A2_BAS),y		; store normal version
                rts

;----------------------------------------------------------------------------------------
SetCursorFlash				; turn cursor normal character to blink
		SUBROUTINE
                ldy A2_CH		
                lda (A2_BAS),y		; get current cursor character
                and #$3f		; isolate character data
                ora #$40		; make it blink
                sta (A2_BAS),y		; store blink version
                rts

;----------------------------------------------------------------------------------------
ClearScreen	SUBROUTINE
		bit ZP_MON_FLAGS	; test bit 6: graphics or text mode?
                bvs .clrGraphics
                jmp A2_HOME		; text mode
.clrGraphics	lda #$20
		bit ZP_MON_FLAGS	; test bit 5: GR or HGR
                bne .clrHGR
                lda #$10		
                bit ZP_MON_FLAGS	; test bit 4: full screen or mixed
                beq .clrMixed
                jmp A2_CLRSCR		; clear full screen lores graphics
.clrMixed	jmp A2_CLRTOP		; clear mixed screen lores graphics
.clrHGR         jmp A2_HCLEAR		; clear hires screen

;----------------------------------------------------------------------------------------
SetGraphicsMode	SUBROUTINE
		bit ZP_MON_FLAGS	; test bit 6: graphics or text mode
                bvs .setGraphics
                sta A2_TXTSET		; text mode. Set full screen text and exit.
                rts
.setGraphics	sta A2_TXTCLR		; graphics mode. Set and continue with other params
		lda #$20
		bit ZP_MON_FLAGS	; test bit 5: GR or HGR
                bne .setHGR
                sta A2_LORES		; set lo-res grpahics
                beq .textMix
.setHGR		sta A2_HIRES
.textMix	lda #$10
		bit ZP_MON_FLAGS	; test bit 4: full screen or mixed
                bne .full
                sta A2_MIXSET		; set mixed screen mode
                rts
.full		sta A2_MIXCLR		; set full screen mode
		rts
                
;----------------------------------------------------------------------------------------
HandleSpecialChar			; exit with carry set if ZP_DATAL should be printed
		SUBROUTINE
                cmp #$08		; backspace - just pass it through
		beq .passThrough
		cmp #$0a		; line feed - just pass it through
                beq .passThrough
                cmp #$14		; cursor on
                bne .n1
                jsr SetCursorFlash
                lda ZP_MON_FLAGS
                ora #$08		; set flag bit 3
                sta ZP_MON_FLAGS
                jmp .printNull		; exit by printing null character
.passThrough	sec
		rts
.printNull	lda #$00
		sta ZP_DATAL		; "print" nonprintable character to update cursor
                sec
                rts
.n1		cmp #$16		; cursor off
		bne .n2
                jsr SetCursorNormal
		lda ZP_MON_FLAGS
                and #$f7		; clear flag bit 3
                sta ZP_MON_FLAGS
                jmp .printNull
.n2		cmp #$15		; input mode on
		bne .n3
                lda ZP_MON_FLAGS
                ora #$04		; set flag bit 2
                sta ZP_MON_FLAGS
                clc
                rts
.n3		cmp #$17		; input mode off
		bne .n4
                lda ZP_MON_FLAGS
                and #$fb		; clear flag bit 2
                sta ZP_MON_FLAGS
                clc
                rts
.n4		cmp #$0d		; carriage return
		bne .n5
                jsr SetCursorNormal
                jmp .cr
.n5		cmp #$0c		; home cursor
		bne .n6
                jsr SetCursorNormal
                lda #$00
                jsr A2_TABV		; set vtab = 0
.cr		lda #$00
                sta A2_CH		; set htab = 0
                jmp .printNull		; need to print something to set cursor
.n6		cmp #$0e		; clear current display
		bne .n7
                jsr ClearScreen
                clc
                rts
.n7		cmp #$1b		; escape
		bne .default
                lda ZP_MON_FLAGS
		ora #$80		; set flag bit 7
                sta ZP_MON_FLAGS
.default	clc			; default - don't print anything
		rts
                
;----------------------------------------------------------------------------------------
HandleEscape	SUBROUTINE
		lda ZP_ESCAPE_CODE
                bne .handleParam	; is this the command or a parameter
                
                lda ZP_DATAL		; get the command and check it
          	ldx #$07		; check to see if it's valid
.checkLoop      cmp .escapeCommands,x
                beq .valid
                dex
                bpl .checkLoop		; keep checking
                jmp .completed		; command not found, so clear escape sequence
                
.valid          sta ZP_ESCAPE_CODE	; save the escape code and wait for parameter
                rts
                
.escapeCommands	hex 48 4c 47 50 6c 70 76 68 

.handleParam	lda ZP_ESCAPE_CODE	; get the escape command

; one paramter commands
                cmp #$48		; set cursor position
                bne .n1
                jsr SetCursorNormal	; if moving cursor position, stop flashing
              	lda #$17		; check parameters
           	cmp ZP_DATAL
                bpl .chkX
                sta ZP_DATAL		; if param is > max, store max
.chkX           lda #$27
                cmp ZP_DATAH
                bpl .setPosn
                sta ZP_DATAH		; if param is > max, store max
.setPosn	lda ZP_DATAL		; somehow this is required or it doesn't work!
		jsr A2_TABV		; set vtab
                lda ZP_DATAH
                sta A2_CH		; set htab
		jmp .completed

.n1		cmp #$4c		; set graphics color
		bne .n2
                lda #$20
		bit ZP_MON_FLAGS	; test bit 5: GR or HGR?
                bne .hires
                lda ZP_DATAL
                and #$0f		; only take lower nybble
                jsr A2_SETCOL
                jmp .completed
.hires          lda ZP_DATAL
		and #$07		; only take lower 3 bits
                tax
                jsr A2_SETHCOL
                jmp .completed
   		        
.n2		cmp #$47		; set graphics modes
		bne .n3
		lda ZP_MON_FLAGS
                and #$8f		; clear bits 4, 5 and 6
                sta ZP_MON_FLAGS
		lda ZP_DATAL
                and #$07		; take low three bits
                asl			; shift into place
                asl
                asl
                asl
                ora ZP_MON_FLAGS	; set bits 4, 5 and 6
                sta ZP_MON_FLAGS
                jsr SetGraphicsMode
		jmp .completed

.n3		cmp #$50		; GR Plot
		bne .n4
   		lda ZP_DATAL		; y coordinate in accumulator
                ldy ZP_DATAH		; x coordinate in y register
                jsr A2_PLOT		; call Apple lo-res plot function
                jmp .completed
  
 ; two parameter commands 
.n4      	lda ZP_FIRSTH		; check to see if we already have the first paramter
                cmp #$ff
                bne .finishCommand
                lda ZP_DATAH		; save first parameter and wait for next one
                sta ZP_FIRSTH
                lda ZP_DATAL
                sta ZP_FIRSTL
                rts			; exit without clearing any flags so next param comes in
                
.finishCommand	lda ZP_ESCAPE_CODE
		cmp #$70		; HGR Plot
		bne .n5
	        lda ZP_DATAL		; y coordinate
                ldx ZP_FIRSTL		; x coordinate
                ldy ZP_FIRSTH
	        jsr A2_HPLOT
                jmp .complete2Param
                
.n5             cmp #$6c		; HGR Lineto
		bne .n6
                ldy ZP_DATAL		; y coordinate
                ldx ZP_FIRSTH
                lda ZP_FIRSTL		; x coordinate
                jsr A2_HGLIN
                jmp .complete2Param

.n6		cmp #$68		; GR Horizontal Line
		bne .n7
                ldy ZP_FIRSTH		; x start
                lda ZP_FIRSTL
                sta A2_H2		; x finish
                lda ZP_DATAL		; at y
                jsr A2_HLINE
                jmp .complete2Param
                
.n7		cmp #$76		; GR Vertical Line
		bne .err
                ldy ZP_DATAL		; at x
                lda ZP_FIRSTL
                sta A2_V2		; y finish
                lda ZP_FIRSTH		; y start
                jsr A2_VLINE
         	jmp .complete2Param       

.err		brk			; this should never happen

.complete2Param	lda #$ff
		sta ZP_FIRSTH		; clear out first parameter
.completed	lda ZP_MON_FLAGS
                and #$7f		; clear escape code flag
                sta ZP_MON_FLAGS
                lda #$00
                sta ZP_ESCAPE_CODE	; clear out command
                rts
                
;----------------------------------------------------------------------------------------
; WriteAddress - sets the Spikeputor address and writes the word. 
;		set X to ADDRH, A to ADDRL, Y to zero page address of word (big endian)
;		scrambles A, X and Y
;----------------------------------------------------------------------------------------
		SUBROUTINE
WriteAddress	stx ZP_DATAH
		sta ZP_DATAL
                lda #$a0
                sta ZP_CMD_STAT
                jsr SPICmd		; set address
                
                lda #$90
                sta ZP_CMD_STAT
                tya
                tax
                lda $00,x
                sta ZP_DATAH
                lda $01,x
                sta ZP_DATAL		; put data into CMD_PKG
                jsr SPICmd		; write data
                rts
		
;----------------------------------------------------------------------------------------
; ReadAddress - sets the Spikeputor address and reads the word. 
;		set X to ADDRH, A to ADDRL, scrambles A and X, data in ZP_CMD_PKG
;----------------------------------------------------------------------------------------  
		SUBROUTINE
ReadAddress  	stx ZP_DATAH
                sta ZP_DATAL
                lda #$a0
                sta ZP_CMD_STAT
                jsr SPICmd		; set address
                
                lda #$80
                sta ZP_CMD_STAT
                jsr SPICmd		; read data
                rts
                
;----------------------------------------------------------------------------------------
; StopSpikeputor - sends the Spikeputor a stop command and waits until it stops
;		 - A and X scrambled.
;----------------------------------------------------------------------------------------    
                SUBROUTINE
StopSpikeputor 	lda #$F0
                sta ZP_CMD_STAT
                jsr SPICmd		; stop Spikeputor
.waitForStop	lda #$80
 		sta ZP_CMD_STAT
                jsr SPICmd		; check to see that it is stopped
                lda ZP_CMD_STAT
                bmi .waitForStop	; if bit 7 is set, not yet stopped
		rts
                
;----------------------------------------------------------------------------------------
; RestartSpikeputor - sends the Spikeputor a restart command after conditioning the Address bus
;		    - A and X scrambled.
;----------------------------------------------------------------------------------------
                SUBROUTINE
RestartSpikeputor
		ldx #$ff		; set address bus to $ffff
		lda #$ff		; this helps make sure 0's don't back up into the Spikeputor PC
		jsr ReadAddress		; causing the Spikeputor to randomly branch to wrong address
		lda #$e0
		sta ZP_CMD_STAT
                jsr SPICmd		; restart Spikeputor
                rts
                
;----------------------------------------------------------------------------------------
; ResetSpikeputor - sends the Spikeputor a reset command and waits until it resets
;		    - A and X scrambled.
;----------------------------------------------------------------------------------------                
		SUBROUTINE
ResetSpikeputor
		lda #$c0
		sta ZP_CMD_STAT
                jsr SPICmd		; reset Spikeputor
.waitForReset	lda #$80
 		sta ZP_CMD_STAT
                jsr SPICmd		; check to see that it is stopped
                lda #$20		; check status bit 5 (RESET) to see if it has happened
                bit ZP_CMD_STAT
                beq .waitForReset	; if bit 5 is set, not yet stopped
                lda #$e0
                jsr A2_WAIT		; allow Spikeputor to reset
                rts
                
;-----------------------------------------------------------------------------------------
; Command dispatches
;-----------------------------------------------------------------------------------------
		org $9400
D_SPICmd	JMP SPICmd
D_UploadVerify	JMP UploadVerify
D_Monitor_IO	JMP Monitor_IO

		ldx #00
                stx ZP_BUF_IDXH
                stx ZP_BUF_IDXL
                
.next           ldx #>SP_OUT_BUF_IDX
                lda #<SP_OUT_BUF_IDX
                ldy #ZP_BUF_IDX
                jsr WriteAddress	; write new buffer indeces   
                
                lda #$80
                jsr A2_WAIT
                
		ldx #>SP_OUT_BUF_IDX
                lda #<SP_OUT_BUF_IDX
                jsr ReadAddress		; read buffer indeces
                
                lda ZP_DATAH
                cmp ZP_BUF_IDXH
                bne .err
                lda ZP_DATAL
                cmp ZP_BUF_IDXL
                bne .err
                
.inc            inc ZP_BUF_IDXL
                bne .next
                inc ZP_BUF_IDXH
                bne .next
                rts
                
.err		lda ZP_DATAH
		jsr $fdda
                lda ZP_DATAL
                jsr $fdda
                lda $a0
                jsr $fded
                lda ZP_BUF_IDXH
                jsr $fdda
                lda ZP_BUF_IDXL
                jsr $fdda
                lda $8d
                jsr $fded
                jmp .inc

                
                